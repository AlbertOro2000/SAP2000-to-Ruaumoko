# -*- coding: utf-8 -*-
"""
s2k_to_rmk.py: This module converts the .s2k file exported by SAP2000 into a 
Ruaumoko format and modify the Ruaumoko input file.
"""

import datetime
import pickle
import tkinter as tk
from tkinter import filedialog

import config as cfg
import nodes
import lumped_weights
import members
import props

# Define helper functions
def select_file_dialog():
    """ This function purpose is to present a dialog box to the user for 
    selecting a file and return the file path. """
    root = tk.Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename()
    
    return file_path

def get_s2k_data(s2k_file):
    """ This function convert the .txt file into a list filled with dictionaries
    for each line of the file, as well as returning a table of contents for 
    each table entry in the s2k file. """
    s2k_raw = []
    table_of_contents = [['HEADER',0]]
    running_line = ''
    
    for line in s2k_file:
        if len(s2k_raw) == 0:
            # Skip the first line
            s2k_raw.append('HEADER')
            continue
        
        if line[-2] == cfg.s2k_running_symbol:
            # Handle the overruning line case, where '_' is the identifier auto 
            # generated by s2k
            running_line += cfg.s2k_file_delimiter + line[0:-2].strip()
            continue
        elif running_line != '':
            line = running_line + cfg.s2k_file_delimiter + line.strip()
            running_line = ''
        
        if cfg.s2k_table_title in line:
            # To update the table of content where the title of a table is 
            # found
            line = line.strip()
            table_of_contents[-1].append(len(s2k_raw) - 1)
            table_of_contents.append([line, len(s2k_raw) + 1])
            s2k_raw.append(line)
        else:
            # Where it is not a header (first line of the file), converts a 
            # line of string into a row in tabular form and appends the line
            # into the s2k_raw list
            line = line.strip()
            
            if line != '':
                line_list = line.split(cfg.s2k_file_delimiter)
                cell_row = []
                
                for entry in line_list:
                    entry_pair = tuple(entry.split('='))
                    cell_row.append(entry_pair)
                    
                s2k_raw.append(dict(cell_row))
            else:
                s2k_raw.append(line)
        
    s2k_file.close()
    
    # Generate a table of content in dictionary form
    table_of_contents = {entry[0] : entry[1:] for entry in table_of_contents}
    
    return (s2k_raw, table_of_contents)

def save_data(nodes_instances, beams_instances, cols_instances, links_instances):
    """ This function saves the s2k to rmk nodes no. and members no., and the  
    props no. to members no. dictionaries, which are contained in the first 
    part of the data to be saved. The second part contained nodes_instances 
    (group of StoreyNodes instances), beams_instances (group of StoreyBeams 
    instances), cols_instances (group of Columns instances), and links_instances 
    (group of  Links instances). """
    s2k_to_rmk_nd = nodes.get_dictionaries(nodes_instances)
    prop_to_mmbr, s2k_to_rmk_frm, s2k_to_rmk_link = members.get_dictionaries(
            beams_instances, cols_instances, links_instances)
    
    data = ((prop_to_mmbr, s2k_to_rmk_nd, s2k_to_rmk_frm, s2k_to_rmk_link), 
            (nodes_instances, beams_instances, cols_instances, links_instances))
    
    with open('data.pickle', 'wb') as f:
        pickle.dump(data, f)
    
def output_txt(s2k_file_path, rmk_ndl_pnt, rmk_mmbr_geo, rmk_mmbr_props, 
               rmk_ndl_drft, rmk_ndl_wgt, rmk_sttc_ld):
    """ Generate the printable outputs of this program and write them into a 
    txt file. """
    datetime_info = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    header = ('Output of converter.py (s2k file to rmk input file). ' + 
              'Generated on: {}. '.format(datetime_info) + 
              'Source file: {}\n'.format(s2k_file_path))
    ttl_ndl_pnt = '\n"TITLE: Ruaumoko nodal points definition"\n'
    ttl_ndl_drft = '\n"TITLE: Ruaumoko nodal drifts definition"\n'
    ttl_mmbr_geo = '\n"TITLE: Ruaumoko member geometry definition"\n'
    ttl_mmbr_props = '\n"TITLE: Ruaumoko member properties definition"\n'
    ttl_ndl_wgt = '\n"TITLE: Ruaumoko lumped nodal weights definition"\n'
    ttl_sttc_ld = '\n\n"TITLE: Ruaumoko static loads definition"\n'
    
    # Create a new txt file to store the data
    with open('output.txt', 'w') as rmk_file:
        rmk_file.write(header + ttl_ndl_pnt + rmk_ndl_pnt + ttl_ndl_drft + 
                       rmk_ndl_drft + ttl_mmbr_geo + rmk_mmbr_geo + 
                       ttl_mmbr_props + rmk_mmbr_props + ttl_ndl_wgt + 
                       rmk_ndl_wgt + ttl_sttc_ld + rmk_sttc_ld)
    
    print('\nConversion successful!')

# Define the main() function
def main():
    # Inquire the user for the file path of the source s2k file to convert
    print('Select the .s2k file exported by SAP2000...\n')
    s2k_file_path = select_file_dialog()
    
    # Get the raw s2k file (s2k_raw) and its associated table of contents
    with open(s2k_file_path, 'r') as s2k_file:
        s2k_data = get_s2k_data(s2k_file)
    
    # Convert the s2k joint coordinates to rmk nodal coordinates
    rmk_ndl_pnt, nodes_instances, weight_instances = nodes.convert(s2k_data)
    
    # Convert the s2k frame & link sections to rmk member properties input
    rmk_mmbr_props, get_rmk_props_no = props.convert(s2k_data)
    
    # Convert the s2k frame & link connectivity to rmk member geometry input
    rmk_mmbr_geo, beams_instances, cols_instances, links_instances = members.convert(
            s2k_data, nodes_instances, weight_instances, get_rmk_props_no)
    
    # Obtain the rmk inputs for nodal drift, lumped nodal weights and static loads
    rmk_ndl_drft, rmk_ndl_wgt, rmk_sttc_ld = lumped_weights.convert(weight_instances)
    
    # Pickle the s2k to rmk converts and the member instance containers
    save_data(nodes_instances, beams_instances, cols_instances, links_instances)

    # Print the rmk inputs into a txt file
    output_txt(s2k_file_path, rmk_ndl_pnt, rmk_mmbr_geo, rmk_mmbr_props, 
               rmk_ndl_drft, rmk_ndl_wgt, rmk_sttc_ld)

# Run the main() function
if __name__ == '__main__':
    main()